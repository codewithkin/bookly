generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model me {
  id String @id
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  appointments  Appointment[]
  availability  Availability[]
  settings      Settings?
  services      Service[]
  clients       Client[]
  notifications Notification[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Appointment {
  id         String     @id @default(uuid())
  userId     String
  clientId   String?
  serviceId  String?
  clientName String
  service    String
  date       DateTime
  status     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  client     Client?    @relation(fields: [clientId], references: [id])
  serviceRef Service?   @relation(fields: [serviceId], references: [id])
  notifications Notification[]

  @@map("appointment")
}

model Settings {
  id             String   @id @default(uuid())
  userId         String   @unique
  notifications  Boolean  @default(true)
  timezone       String   @default("UTC")
  bookingPadding Int      @default(15)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Availability {
  id        String   @id @default(uuid())
  userId    String
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Service {
  id          String        @id @default(uuid())
  userId      String
  name        String
  description String?
  duration    Int           // in minutes
  price       Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("service")
}

model Client {
  id           String        @id @default(uuid())
  userId       String
  name         String
  email        String?
  phone        String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("client")
}

model Notification {
  id            String       @id @default(uuid())
  userId        String
  appointmentId String
  type          String       // e.g., "email", "sms"
  status        String       // "pending", "sent", etc.
  scheduledAt   DateTime
  sentAt        DateTime?
  createdAt     DateTime     @default(now())

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment   Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("notification")
}
